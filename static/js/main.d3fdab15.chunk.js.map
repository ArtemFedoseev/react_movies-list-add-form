{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","defaultState","errors","NewMovie","state","handleInputChange","event","target","name","value","setState","setSpecialValue","field","validateTextInput","valueWithoutSpaces","replace","validateLink","valueIsNotLink","match","isFormComplete","hasEmptyFields","Object","values","filter","some","hasErrors","error","this","htmlFor","id","type","classnames","onChange","onBlur","onClick","props","onAdd","disabled","Component","App","moviesFromServer","addMovie","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d3fdab15.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","import React, { Component } from 'react';\nimport './NewMovie.scss';\nimport classnames from 'classnames';\n\ntype Props = {\n  onAdd: (movie: Movie) => void,\n};\ntype State = {\n  title: string,\n  description: string,\n  imgUrl: string,\n  imdbUrl: string,\n  imdbId: string,\n  errors: {\n    title: boolean,\n    description: boolean,\n    imgUrl: boolean,\n    imdbUrl: boolean,\n    imdbId: boolean,\n  },\n};\ntype InputEvents = React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLTextAreaElement>;\n\nconst IMAGE_URL = 'https://via.placeholder.com/600x1000';\nconst IMDB_URL = 'https://www.imdb.com/';\n\nconst defaultState = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n  errors: {\n    title: false,\n    description: false,\n    imgUrl: false,\n    imdbUrl: false,\n    imdbId: false,\n  },\n};\n\nexport class NewMovie extends Component<Props, State> {\n  state: State = defaultState;\n\n  handleInputChange = (event: InputEvents) => {\n    const { name, value } = event.target;\n\n    this.setState(state => {\n      return {\n        ...state,\n        [name]: value,\n      };\n    });\n  };\n\n  setSpecialValue = (field: string, value: string) => {\n    this.setState(state => ({\n      ...state,\n      [field]: value,\n      errors: {\n        ...state.errors,\n        [field]: false,\n      },\n    }));\n  };\n\n  validateTextInput = (event: InputEvents) => {\n    const { name, value } = event.target;\n    const valueWithoutSpaces = value.replace(/\\s/g, '');\n\n    this.setState(state => {\n      return {\n        ...state,\n        errors: {\n          ...state.errors,\n          [name]: valueWithoutSpaces === '',\n        },\n      };\n    });\n  };\n\n  validateLink = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n    const valueIsNotLink = !value.match(/^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/);\n\n    this.setState(state => {\n      return {\n        ...state,\n        errors: {\n          ...state.errors,\n          [name]: valueIsNotLink,\n        },\n      };\n    });\n  };\n\n  isFormComplete = () => {\n    const fields = Object.values(this.state).filter(value => typeof value === 'string');\n    const hasEmptyFields = fields.some(field => field === '');\n    const hasErrors = Object.values(this.state.errors).some(error => error);\n\n    return hasEmptyFields || hasErrors;\n  };\n\n  render() {\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n      errors,\n    } = this.state;\n\n    return (\n      <form className=\"form\">\n        <label\n          htmlFor=\"title-input\"\n          className=\"form__input\"\n        >\n          <span className=\"form__label-text\">\n            Title\n          </span>\n          <input\n            id=\"title-input\"\n            type=\"text\"\n            name=\"title\"\n            className={classnames(\n              'form__input-field',\n              { 'form__input-field--invalid': errors.title },\n            )}\n            onChange={this.handleInputChange}\n            value={title}\n            onBlur={this.validateTextInput}\n          />\n          <br />\n          {errors.title && 'Required field'}\n        </label>\n\n        <label\n          htmlFor=\"description-input\"\n          className=\"form__input\"\n        >\n          <span className=\"form__label-text\">\n            Description\n          </span>\n          <textarea\n            id=\"description-input\"\n            name=\"description\"\n            className={classnames(\n              'form__input-field',\n              { 'form__input-field--invalid': errors.description },\n            )}\n            value={description}\n            onChange={this.handleInputChange}\n            onBlur={this.validateTextInput}\n          />\n          <br />\n          {errors.description && 'Required field'}\n        </label>\n\n        <label\n          htmlFor=\"img-url-input\"\n          className=\"form__input\"\n        >\n          <span className=\"form__label-text\">\n            Image URL\n          </span>\n          <button\n            type=\"button\"\n            onClick={() => {\n              this.setSpecialValue('imgUrl', IMAGE_URL);\n            }}\n          >\n            Use Placeholder\n          </button>\n          <input\n            id=\"img-url-input\"\n            type=\"text\"\n            name=\"imgUrl\"\n            className={classnames(\n              'form__input-field',\n              { 'form__input-field--invalid': errors.imgUrl },\n            )}\n            value={imgUrl}\n            onChange={this.handleInputChange}\n            onBlur={this.validateLink}\n          />\n          <br />\n          {errors.imgUrl && 'Must be a link'}\n        </label>\n\n        <label\n          htmlFor=\"imdb-url-input\"\n          className=\"form__input\"\n        >\n          <span className=\"form__label-text\">\n            IMDB URL\n          </span>\n          <button\n            type=\"button\"\n            onClick={() => {\n              this.setSpecialValue('imdbUrl', IMDB_URL);\n            }}\n          >\n            Default IMDB link\n          </button>\n          <input\n            id=\"imdb-url-input\"\n            type=\"text\"\n            name=\"imdbUrl\"\n            className={classnames(\n              'form__input-field',\n              { 'form__input-field--invalid': errors.imdbUrl },\n            )}\n            value={imdbUrl}\n            onChange={this.handleInputChange}\n            onBlur={this.validateLink}\n          />\n          <br />\n          {errors.imdbUrl && 'Must be a link'}\n        </label>\n\n        <label\n          htmlFor=\"imdb-id-input\"\n          className=\"form__input\"\n        >\n          <span className=\"form__label-text\">\n            IMDB ID\n          </span>\n          <input\n            id=\"imdb-id-input\"\n            type=\"text\"\n            name=\"imdbId\"\n            className={classnames(\n              'form__input-field',\n              { 'form__input-field--invalid': errors.imdbId },\n            )}\n            value={imdbId}\n            onChange={this.handleInputChange}\n            onBlur={this.validateTextInput}\n          />\n          <br />\n          {errors.imdbId && 'Required field'}\n        </label>\n\n        <button\n          type=\"button\"\n          onClick={() => {\n            this.props.onAdd({\n              title,\n              description,\n              imgUrl,\n              imdbUrl,\n              imdbId,\n            });\n            this.setState(defaultState);\n          }}\n          disabled={this.isFormComplete()}\n        >\n          ADD\n        </button>\n      </form>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\ninterface State {\n  movies: Movie[];\n}\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie: Movie) => {\n    this.setState(state => {\n      return {\n        movies: [\n          ...state.movies,\n          movie,\n        ],\n      };\n    });\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie onAdd={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}